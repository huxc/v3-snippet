{
  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "then": {
    "prefix": "then",
    "body": ".then(${1:res} => {\n\t${2}\n})",
    "description": "Add the .then methods to handle promises"
  },
  "thenError": {
    "prefix": "thene",
    "body": ".then(${1:res} => {\n\t${2}\n},${3:err} => {\n\t${4}\n})",
    "description": "Add the .then methods to handle promises"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then(${1:res} => {\n\t${2}\n}).catch(${3:err} => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises"
  }
}
